//grab recent contacts from a user

var processPosts = function(results) {

        console.log('in results');
                //get my recent contacts
                var data = results.data;
                for(var i = 0; i < data.length; i++){
                    var obj = data[i]['story_tags'];
                    for (var key in obj){
                        for (var j = 0; j<obj[key].length; j++){
                            //console.log('hey ' + obj[key][j]['id'] + ' ' + obj[key][j]['name']);
                            recentContacts[obj[key][j]['id']] = true;
                        }
                    }  
                }      
            };

//grab recent statuses of each user

fb.get("1147911588/statuses", function(err, results) {
             //concat and add
        var data = results.data;

        for(var i = 0; i < data.length; i++){
            recentContacts['1147911588'] = recentContacts['1147911588'] + ' ' + data[i]['message'];
        }  
        //console.log(recentContacts['1147911588']);

        alchemy.sentiment('i hate all people.  they suck', {}, function(err, response) {
            if (err) throw err;

            // See http://www.alchemyapi.com/api/ for format of returned object
            var sentiment = response.docSentiment;
            console.log('sentiment analysis for user 147911588 is ', sentiment);

            // Do something with data
        });


     });

//////WORKING CODE BELOW

var getContacts = function(){
        var p = new Promise;

       // var recentContacts = {};

        fb.get("me/posts", function(err, results) {
            //get my recent contacts
            var data = results.data;
            for(var i = 0; i < data.length; i++){
                var obj = data[i]['story_tags'];
                for (var key in obj){
                    for (var j = 0; j<obj[key].length; j++){
                        //console.log('hey ' + obj[key][j]['id'] + ' ' + obj[key][j]['name']);
                        recentContacts[obj[key][j]['id']] = true;
                    }
                }  
            }
            p.resolve(recentContacts);         
        });

        return p;
    };

    getStatuses = function (userId){
        var p = new Promise;
        console.log('in getStatuses');

        fb.get(userId + "/statuses", function(err, results) {
            console.log('iterating statuses');
            console.log('do we have userId in here? -> ', userId);
            var data = results.data;
            for(var i = 0; i < data.length; i++){
                recentContacts[userId] = recentContacts[userId] + ' ' + data[i]['message'];
            }    
            p.resolve(recentContacts[userId]);
        });

        return p;
    };

    getAlchemyScore = function(text){
        var p = new Promise;
        //console.log('in getAlchemyScore');
        //console.log('this is passed in -->', text);

        alchemy.sentiment(text, {}, function(err, response) {
            if (err) throw err;
            // See http://www.alchemyapi.com/api/ for format of returned object
            var sentiment = response.docSentiment;
            //console.log('sentiment analysis for user 147911588 is ', sentiment);
            p.resolve(sentiment);
        });

        return p;
    };

    // getContacts().then(function (obj){
    //     console.log('getContacts resolved');
    //    // console.log('passed from getContacts fullfillment : ', obj);

    // });

    // getStatuses(1339502399).then(function(obj){
    //     console.log('passed from getStatuses fullfillment : ', obj);

    // })
   
   // getAlchemyScore('i love daisies').then(function(result){
   //  console.log('result from aclchemy is: ', result);

   // });

    //chain
    // getContacts().then(getAlchemyScore).then(function(result){
    //     console.log('result from alchemy is: --> ', result);
    // });

    
    
    getStatuses(1339502399).then(getAlchemyScore).then(function(result){
        console.log('result from stats/alchemy is: --> ', result);
    });




    // asyncOperation(function(){
    // Promise.resolve("succesful result");
    // });
    // promise -> given to the consumer

    res.send('hey');

});











